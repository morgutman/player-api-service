#spring.jpa.hibernate.ddl-auto=create
#spring.datasource.url=jdbc:mysql://localhost:3306/player_api_service?useSSL=false
server.servlet.context-path=/player-api-service
server.port=8075
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# spring.datasource.username & spring.datasource.password properties are the same as your database installation
#spring.datasource.username=root
#spring.datasource.password=root

# Spring Boot uses Hibernate for JPA implementation, we configure MySQL5InnoDBDialect for MySQL database
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Java Persistence API (JPA) is a specification that provides a set of interfaces and annotations for mapping Java objects
# to relational databases. Spring Data JPA is a part of the Spring Framework that integrates JPA with Spring,
# making it easier to work with databases in a Spring application.
# using spring.jpa.hibernate.ddl-auto=none is recommended with Liquibase to avoid conflicts between automatic schema
# generation by JPA and schema management by Liquibase. Liquibase will take care of updating the schema,
# and JPA will focus solely on entity mapping.
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.ddl-auto=create

# When you set spring.jpa.show-sql=true, Hibernate will log the SQL statements that it generates and executes to the console.
# This can be helpful during development and debugging, as it allows you to see the actual SQL queries that are
# being sent to the database.
#spring.jpa.show-sql=true